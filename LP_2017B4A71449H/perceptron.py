# -*- coding: utf-8 -*-
"""Perceptron

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YxLMUYU48iZG5Gz18oD9vq3jVestp-GR
"""

import numpy as np
import pandas as pd


df2 = pd.read_csv('dataset_LP_2.csv')

df2.columns =  ['x1','x2','x3','y']

train_data2 = df2.sample(frac=0.7,random_state=0)
test_data2 = df2.drop(train_data2.index)
train_data2 =  train_data2.to_numpy()
test_data2 =  test_data2.to_numpy()

def perceptron(data):
  w2=np.ones((4,1))
  miss_classified2=pd.DataFrame(columns=['x1','x2','x3','y'])
  eta=1
  i=0
  loss_previt2=0
  miss_cal = 0
  while i<1e6:
    loss=0
    for j in data:
      k=(np.matmul(np.transpose(w2),(np.array([1,j[0],j[1],j[2]])).reshape((4,1))))
      if j[3]==0:
        k=-1*k
      else:
        k=1*k
      if k<0:
        miss_classified2.loc[len(miss_classified2)]=j
        loss=loss-k
    miss=miss_classified2.to_numpy()
    miss_cal = len(miss)
    print('In the iteration',i)
    print('The number of misclassified examples are',len(miss))
    print('With a loss value of',loss)
    print('')
    if len(miss)==0:
          break
    if loss==loss_previt2:
          break
    if len(miss)==1:
          j=np.array(miss[0])
    else :
          j = np.array(miss[np.random.randint(0,len(miss)-1)])  
    tn=1
    if j[3]==0:
          tn=-1
    w2=w2 + (eta*tn)*((np.array([1,j[0],j[1],j[2]])).reshape((4,1)))
    i=i+1
    loss_previt2=loss
    miss_classified2=pd.DataFrame(columns=['x1','x2','x3','y'])
  return miss_cal,w2

def per_test(data,w2_train):
  miss_classified2=pd.DataFrame(columns=['x1','x2','x3','y'])
  eta=1
  i=0
  loss_previt2=0
  miss_cal = 0
  for j in data:
    k=(np.matmul(np.transpose(w2_train),(np.array([1,j[0],j[1],j[2]])).reshape((4,1))))
    if j[3]==0:
      k=-1*k
    else:
       k=1*k
    if k<0:
      miss_classified2.loc[len(miss_classified2)]=j
  miss=miss_classified2.to_numpy()
  miss_cal = len(miss)
  return miss_cal


miss_cal_train_2,w2_train = perceptron(train_data2)

miss_cal_test_2 = per_test(test_data2,w2_train)
print('Accuracy is',(1 - (miss_cal_test_2/len(test_data2)))*100,'%')

df1 = pd.read_csv('dataset_LP_1.txt',sep=',', header=None)

df1.columns =  ['x1','x2','x3','x4','y']

train_data1 = df1.sample(frac=0.7,random_state=0)
test_data1 = df1.drop(train_data1.index)
train_data1 =  train_data1.to_numpy()
test_data1 =  test_data1.to_numpy()

def perceptron_1(data_1):  
  w1=np.ones((5,1))
  miss_classified1=pd.DataFrame(columns=['x1','x2','x3','x4','y'])
  eta=1
  i=0
  loss_previt1=0
  miss_calc_1 = 0
  while i<1e6:
    loss=0
    for j in data_1:
      k=(np.matmul(np.transpose(w1),(np.array([1,j[0],j[1],j[2],j[3]])).reshape((5,1))))
      if j[4]==0:
        k=-1*k
      else:
        k=1*k
      if k<0:
        miss_classified1.loc[len(miss_classified1)]=j
        loss=loss-k
    miss=miss_classified1.to_numpy()
    miss_calc_1 = len(miss)
    print('In the iteration',i)
    print('The number of misclassified examples are',len(miss))
    print('With a loss value of',loss[0][0])
    print('')
    if len(miss)==0:
          break
    if loss==loss_previt1:
          break
    if len(miss) < 6:
      break
    if len(miss)==1:
          j=np.array(miss[0])
    else :
          j = np.array(miss[np.random.randint(0,len(miss)-1)])  
    tn=1
    if j[4]==0:
          tn=-1
    w1=w1 + (eta*tn)*((np.array([1,j[0],j[1],j[2],j[3]])).reshape((5,1)))
    i=i+1
    loss_previt1=loss
    miss_classified1=pd.DataFrame(columns=['x1','x2','x3','x4','y'])
  return miss_calc_1,w1

miss_cal_train_1,w1_train = perceptron_1(train_data1)

def per_test_1(data_1,w1_train):  
  w1=np.ones((5,1))
  miss_classified1=pd.DataFrame(columns=['x1','x2','x3','x4','y'])
  eta=1
  i=0
  loss_previt1=0
  miss_calc_1 = 0
  for j in data_1:
    k=(np.matmul(np.transpose(w1_train),(np.array([1,j[0],j[1],j[2],j[3]])).reshape((5,1))))
    if j[4]==0:
      k=-1*k
    else:
      k=1*k
    if k<0:
      miss_classified1.loc[len(miss_classified1)]=j
  miss=miss_classified1.to_numpy()
  miss_calc_1 = len(miss)
  return miss_calc_1
    

miss_cal_test_1 = per_test_1(test_data1,w1_train)
print('Accuracy is ',(1 - (miss_cal_test_1/len(test_data1)))*100,'%')